# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build OCI Container

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - .github/dependabot.yml
      - 'src/main/helm/**'
      - 'src/main/kubernetes/**'
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - 'KES Corporate Contributor License Agreement (2019-12-31).pdf'
      - LICENSE
      - README.md
      - SECURITY.md
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: quay.io
  IMAGE_NAME: paladinsinn/rollenspiel-cons


jobs:
  release:
    name: Version and Changelog
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      deployments: write
      statuses: write
    
    steps:
    - uses: actions/checkout@v5
    - name: Set up Node.js
      uses: actions/setup-node@v5
      with:
        node-version: "20.x"
    - name: Cache Node.js modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
    - name: Install semver management dependencies
      run: npm ci
    - name: Run Semantic Release
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    
  build-app:
    name: Build with Maven
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Set up Maven
      id: setup-maven
      uses: s4u/maven-settings-action@v4.0.0
      with:
        servers: |
          [
            { "id": "nvdApi", "username": "klenkes74", "password": "${{ secrets.NVD_API_KEY }}"},
            { "id": "torganized-play-commons", "username": "${{ secrets.ARTIFACTSTORE_USER }}", "password": "${{ secrets.ARTIFACTSTORE_PASSWORD }}"}
          ]
        
    - name: Get current RELEASE_VERSION
      run: echo "RELEASE_VERSION=$(git tag --points-at HEAD)" >> $GITHUB_ENV
    - name: Get current POM_VERSION
      run: echo "POM_VERSION=$(git tag --points-at HEAD | sed 's/^v//')" >> $GITHUB_ENV
    - name: Show versions
      run: echo -e "RELEASE_VERSION=${{ env.RELEASE_VERSION }}\nPOM_VERSION=${{ env.POM_VERSION }}"
        
    - name: Set project.version in pom.xml with versions-maven-plugin
      run: |
        mvn versions:set -U --batch-mode --no-transfer-progress -DnewVersion=${{ env.POM_VERSION }} -DgenerateBackupPoms=false
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add pom.xml
        git commit -m "chore(release): set version to pom.xml $MAVEN_VERSION [skip ci]"
        git push origin main
    
    - name: Compile stuff
      id: build-java
      run: mvn package -U --batch-mode --no-transfer-progress
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
      
    - name: Prepare Artifacts
      run: |
        mkdir -p java-artifacts/target
        cp -a target/app.jar java-artifacts/target/
        cp -a Dockerfile .dockerignore pom.xml java-artifacts
    
    - name: Store result
      uses: actions/upload-artifact@master
      with:
        name: java-artifacts
        path: java-artifacts

  publish-quay:
    name: Create and Publish OCI Container
    runs-on: ubuntu-latest
    needs: build-app
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
    - name: Login to Quay.io
      uses: docker/login-action@v3
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_ORG_USER }}
        password: ${{ secrets.QUAY_ORG_TOKEN }}
    
    - name: Retrieve Artifacts
      uses: actions/download-artifact@master
      with:
        name: java-artifacts
        path: .
    
    - name: Set Release version env variable
      run: |
        echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
    
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ env.RELEASE_VERSION }}
        outputs: type=image,name=target
      